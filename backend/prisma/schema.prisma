// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CountryCode {
  RU
  US
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages   Message[]
  sessions   Session[]
  country    Country?    @relation(fields: [countryId], references: [id])
  countryId  String?
  onlineUser OnlineUser?

  @@map("users")
}

model Country {
  id        String      @id @default(cuid())
  code      CountryCode @unique // ISO 3166-1 alpha-2
  name      String
  flagImage String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  users User[]
  chats Chat[]

  @@map("countries")
}

model Chat {
  id        String   @id @default(cuid())
  countryId String
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country     Country      @relation(fields: [countryId], references: [id])
  messages    Message[]
  onlineUsers OnlineUser[]

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  chatId    String
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@map("messages")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model OnlineUser {
  id       String   @id @default(cuid())
  userId   String   @unique
  socketId String
  chatId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@map("online_users")
}
